
################################################################################
# issues

- config file layouts: characters in the "gap" between filerecord and
  infocolumn ("f") are not cleared when switching columnformats.
  Solve this by inserting an artificial "gap" field?

- handlecopyrename: if "overwrite?" is answered with "no", then the
  cursor is repositioned anyway

- (M)ore (S)how same dir: doesn't remove marks
  -> is this due to the fact that Directory::_clone() does not clone the files?
  -> handleswap() has different conditions for executing its blocks

- after (C)opy, the rcs status is not automatically added 

- Term::ScreenColor does not pass some tests on some platforms

- call $pfm->checkupdates() in '@' (perlcommand) does not finish the job;
  call $pfm->checkupdates(); sleep 2; finishes it.

################################################################################
# structural enhancements

- rename D_DIR*    -> D_*

- Directory: readcontents, sortcontents, filtercontents: make private

- use D_FSINFO for _init_filesystem_info() ? -> on time?

- Config->apply: call separate class's import() routines and have them import
  the config options that are interesting for them.
  Or use events.

- restructure chdir(), handleswap()/handlemoreshow()/handlemorego() etc.
- check function of $swapping flag behavior

- add a 'is_main' flag to directories so that they know if a job event may
  trigger a screen update

- have directories keep track of their own background jobs

- make our() variables member variables

- standardize the names of constants

- have History->input() accept a hash instead of 6 arguments

- have objects fire an event to indicate that the current position is to
  be saved ('save_cursor_position' -> position_at())

- have objects fire an event to indicate that the screen is to be updated?
  ('request_deferred_refresh' -> set_deferred_refresh())

- have the browser use events ('handle_command') to tell the application
  that the commandhandler should be called; keep the browser for browsing

- extract abstract code so that browser may be reused for bookmarks and your
  commands; ideally:
  - Screen/Listing/Files
  - Screen/Listing/Bookmarks
  - Screen/Listing/YourCommands
  - Browser/Files
  - Browser/Bookmarks
  - Browser/YourCommands

- cast a critical eye on show_headings;
  make a $frame->getheadings($headings_mode)

- move CommandHandler::_listbookmarks() to Screen/Listing/Bookmarks::list()

################################################################################
# functional enhancements

- intercept bursts of input

- keep marks when F5 refreshing

- introduce SIGQUIT for interrupt multi?

- add -o commandline option for starting with a certain sort mode

- have applycolor() find out if the current line is reverse/italic/bold

################################################################################
# documentation enhancements

- provide information about arguments.
  use I<...> in =items.

  DONE(ITALICS):

  DONE(ARGS): Abstract Application Browser Config File History State Util
	OS OS/Abstract OS/Linux OS/Aix OS/Hpux OS/Sco OS/Solaris
	Screen Screen/Frame Screen/Diskinfo Screen/Listing
	JobHandler Job/CheckUpdates
	Job/Abstract Job/RCS Job/Bazaar Job/Cvs Job/Git Job/Subversion

  TODO: CommandHandler Directory

