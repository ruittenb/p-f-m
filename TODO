
################################################################################
# issues

- from the manual of File::Spec:
  File::Spec->canonpath($path) does *not* collapse x/../y sections into y.
  This is by design. If /foo on your system is a symlink to /bar/baz, then
  /foo/../quux is actually /bar/quux, not /quux as a naive ../-removal would
  give you. If you want to do this kind of processing, you probably want Cwd's
  realpath() function to actually traverse the filesystem cleaning up paths
  like this.

- handlecopyrename: if "overwrite?" is answered with "no", then the
  cursor is repositioned anyway

- (M)ore (S)how same dir: doesn't remove marks
  -> is this due to the fact that Directory::_clone() does not clone the files?
  -> handleswap() has different conditions for executing its blocks

- bug: a file can be (R)enamed to '=e'
- if =5 is requested but there is no swap state, what to do?
- in general, if an escape is invalid, what to do?

- fix the unnecessary delay after:
  ^Cmake: *** [data] Interrupt
  Command failed  [delay]
  *** Hit any key to continue ***

- extract abstract code so that browser may be reused for bookmarks and your
  commands; ideally:
  - Screen/Listing/Files
  - Screen/Listing/Bookmarks
  - Screen/Listing/YourCommands
  - Browser/Files
  - Browser/Bookmarks
  - Browser/YourCommands

- move CommandHandler::_listbookmarks() to Screen/Listing/Bookmarks::list()

- pager: 'less -e' causes problems in Your[i]:svn diff =2 | =p

- bug: if a file is copied to subdir/newname, the cursor doesn't follow around.

################################################################################
# structural enhancements

- replace max() with Scalar::Util (Util::Scalar?)

- make more consistent function_call({boo => 3, foo => 4});

- restructure chdir(), handleswap()/handlemoreshow()/handlemorego() etc.
- check function of $swapping flag behavior
- "Setting the current directory with App::PFM::Directory::path is identical to
  calling App::PFM::Directory::chdir()" -> maybe uncouple these two?

- add an 'is_main' flag to directories so that they know if a job event may
  trigger a screen update

- change Config->{_text} to slurp reading: my $code = do { local $/; <$in> };
- change Config::Update to /\A...\z/mso

- make our() variables member variables (Get Rid of Slimy applicaSion object)

- have File notify the directory through events

- handlefind_incremental needs reviewing if we want to eliminate ->browser-> calls.

- have objects (Directory) fire an event to indicate that the current position
  is to be saved ('save_cursor_position' -> position_at())
  'before_smudge_cursor_position' ?
- like CommandHandler's handlemorebookmark():
  $_pfm->state->{_position}  = $event->{currentfile}{name};
  $_pfm->state->{_baseindex} = $event->{lunchbox}{baseindex};
  => 'before_state_handling'?

- who determines which command was clicked in the menu?
  is that the CommandHandler::handlemousefooter* or Screen::Frame?

- implement 'after_create_entry'

- have a look at IPC::Run

################################################################################
# functional enhancements

- introduce SIGQUIT for interrupt multi?

- figure out and display if an ACL is applicable for a file

- accept mouse clicks on menu in (M)ore

- make si(Z)e a job in the background just like (V)ersion

- nice to have: implement an 'after_job_receive_no_data' event

################################################################################
# documentation enhancements

- manpages: use I<...> in =items

  DONE:

  TODO: Abstract Application Browser CommandHandler Config Directory
	Event File History State Util
	OS OS/Abstract OS/Linux OS/Aix OS/Hpux OS/Sco OS/Solaris
	Screen Screen/Frame Screen/Diskinfo Screen/Listing
	JobHandler Job/CheckUpdates
	Job/Abstract Job/RCS Job/Bazaar Job/Cvs Job/Git Job/Subversion


